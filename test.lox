fun fib(n) {
    if (n <= 1) return n;
    return fib(n - 2) + fib(n - 1);
}

print "Fibonacci sequence";
for (var i = 0; i < 20; i = i + 1) {
    print fib(i);
}


fun makeCounter() {
    var i = 0;

    fun count() {
        i = i + 1;
        return i;
    }

    return count;
}

var counter = makeCounter();

print "Counter closure"; 
print counter(); // 1
print counter(); // 2

var a = "global";
{
    fun showA() {
        print a;
    }

    showA(); // global
    var a = "local";
    showA(); // global
}

print "---- Handle 'this' ---- ";

class Bacon {
    eat() {
        print "Eating bacon with " + this.supplement;
    }

    getCallback() {
        fun callback() {
            print "Hi I'm calling back, my this is: ";
            print this;
            print "And my supplement is " + this.supplement;
        }
        return callback;
    }
}

var b = Bacon();
b.supplement = "Eggs";
b.eat();
b.getCallback()();

class AnotherBacon {
    getCallback() {
        fun callback() {
            print "Hi I'm calling back, my this is:";
            print this;
            print "And my supplement is " + this.supplement;
        }
        return callback;
    }
}

var ab = AnotherBacon();
ab.supplement = "Bread";
ab.getCallback()();


print "---- Class constructors ---- ";

class Token {
    init(lexeme) {
        this.lexeme = lexeme;
    }

    toString() {
        print this.lexeme; 
    }
}

var t = Token("defer");
t.toString();

print "---- Class (static) methods ---- ";

class Math {
    class sqrt(n) {
        return n * n;
    }
}

print Math.sqrt(2);

Math.PI = 3.141592653;
print Math.PI;

print "---- Property getter methods ---- ";

class Circle {
    init(radius) {
        this.radius = radius;
    }

    area {
        return Math.PI * Math.sqrt(this.radius);
    }
}

var c = Circle(4);
print c.area;

