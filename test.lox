fun fib(n) {
    if (n <= 1) return n;
    return fib(n - 2) + fib(n - 1);
}

print "Fibonacci sequence";
for (var i = 0; i < 20; i = i + 1) {
    print fib(i);
}


fun makeCounter() {
    var i = 0;

    fun count() {
        i = i + 1;
        return i;
    }

    return count;
}

var counter = makeCounter();

print "Counter closure"; 
print counter(); // 1
print counter(); // 2

var a = "global";
{
    fun showA() {
        print a;
    }

    showA(); // global
    var a = "local";
    showA(); // global
}

print "---- Handle 'this' ---- ";

class Bacon {
    eat() {
        print "Eating bacon with " + this.supplement;
    }

    getCallback() {
        fun callback() {
            print "Hi I'm calling back, my this is: ";
            print this;
            print "And my supplement is " + this.supplement;
        }
        return callback;
    }
}

var b = Bacon();
b.supplement = "Eggs";
b.eat();
b.getCallback()();

class AnotherBacon {
    getCallback() {
        fun callback() {
            print "Hi I'm calling back, my this is:";
            print this;
            print "And my supplement is " + this.supplement;
        }
        return callback;
    }
}

var ab = AnotherBacon();
ab.supplement = "Bread";
ab.getCallback()();


print "---- Class constructors ---- ";

class Token {
    init(lexeme, line, col) {
        this.lexeme = lexeme;
        this.line = line;
        this.col = col;
    }

    toString() {
        print this.lexeme; 
        print this.line; 
        print this.col; 
    }
}

var t = Token("defer", 2, 4);
t.toString();

